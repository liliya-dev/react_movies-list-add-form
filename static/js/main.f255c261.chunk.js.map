{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Field/Field.js","api/constants.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","Field","option","classTitle","name","error","handleChange","validation","value","isValid","includes","placeholder","type","onChange","event","onBlur","initialState","titleError","descriptionError","imgUrlError","imdbUrlError","imdbIdError","indexes","status","reg","areFieldsValid","fields","disabled","NewMovie","state","target","setState","handleSubmit","preventDefault","props","addMovie","length","test","every","element","onSubmit","this","Component","App","moviesFromServer","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f255c261.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n      imdbId: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Field = ({\n  name, error, handleChange, validation, value, isValid,\n}) => {\n  let option;\n  let classTitle;\n\n  if (name.includes('Url')) {\n    option = 'url';\n  } else if (name === 'title' || name === 'imdbId') {\n    option = 5;\n  } else {\n    option = 0;\n  }\n\n  if (isValid === false) {\n    classTitle = 'no-verified';\n  } else if (isValid === true) {\n    classTitle = 'accepted';\n  } else {\n    classTitle = 'before-verification';\n  }\n\n  return (\n    <div>\n      <input\n        className={`${classTitle} form_input`}\n        value={value}\n        placeholder={name}\n        type=\"text\"\n        name={`${name}`}\n        onChange={event => handleChange(event, value)}\n        onBlur={event => validation(event, option)}\n      />\n      <p className=\"errors\">{error}</p>\n    </div>\n  );\n};\n\nField.propTypes = {\n  name: PropTypes.string.isRequired,\n  error: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  validation: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  isValid: PropTypes.bool.isRequired,\n};\n","export const names = ['title', 'description', 'imdbUrl', 'imdbId', 'imgUrl'];\n\nexport const initialState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n  titleError: '',\n  descriptionError: '',\n  imgUrlError: '',\n  imdbUrlError: '',\n  imdbIdError: '',\n};\n\nexport const indexes = {\n  title: 0,\n  description: 1,\n  imgUrl: 2,\n  imdbUrl: 3,\n  imdbId: 4,\n};\n\nexport const status = [1, 1, 1, 1, 1];\n\n// eslint-disable-next-line max-len\nexport const reg = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Field } from '../Field/Field';\nimport { names, initialState, indexes, status, reg } from '../../api/constants';\n\nconst areFieldsValid = {\n  ...indexes,\n};\n\nlet isValid = [...status];\nconst fields = [...names];\nlet disabled = true;\n\nexport class NewMovie extends Component {\n  state = initialState;\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    return (this.setState(() => ({\n      [name]: value,\n      [`${name}Error`]: '',\n    })));\n  }\n\n  handleSubmit = (event) => {\n    const { title, description, imgUrl, imdbUrl, imdbId } = this.state;\n\n    isValid = [...status];\n    event.preventDefault();\n    this.props.addMovie({\n      title, description, imgUrl, imdbUrl, imdbId,\n    });\n    this.setState(initialState);\n    disabled = true;\n  }\n\n  validation = (event, option) => {\n    const { value, name } = event.target;\n\n    if (typeof option === 'number') {\n      if (value.length < option) {\n        isValid[areFieldsValid[name]] = false;\n        this.setState(() => ({\n          [`${name}Error`]: `Must contain at least ${option} characters`,\n        }));\n      } else {\n        this.setState(() => ({ [`${name}Error`]: '' }));\n        isValid[areFieldsValid[name]] = true;\n      }\n    } else if (option === 'url') {\n      if (!reg.test(value)) {\n        isValid[areFieldsValid[name]] = false;\n        this.setState(() => ({ [`${name}Error`]: 'Enter the correct url' }));\n      } else {\n        this.setState(() => ({ [`${name}Error`]: '' }));\n        isValid[areFieldsValid[name]] = true;\n      }\n    }\n\n    disabled = (!isValid.every(element => element === true));\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <fieldset className=\"inputs-block\">\n          <legend>Add a movie</legend>\n          {\n            fields.map(name => (\n              <Field\n                isValid={isValid[indexes[name]]}\n                name={name}\n                value={this.state[name]}\n                error={this.state[`${name}Error`]}\n                handleChange={this.handleChange}\n                validation={this.validation}\n              />\n            ))\n          }\n        </fieldset>\n        <input\n          disabled={disabled}\n          type=\"submit\"\n          name=\"but\"\n          value=\"Submit\"\n        />\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    return (this.setState(prevState => ({\n      movies: [\n        ...prevState.movies,\n        movie,\n      ],\n    })));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}